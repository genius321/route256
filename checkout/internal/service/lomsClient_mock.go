// Code generated by mockery v2.30.1. DO NOT EDIT.

package service

import (
	context "context"

	grpc "google.golang.org/grpc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"

	loms "route256/checkout/internal/pkg/loms"

	mock "github.com/stretchr/testify/mock"
)

// MockLomsClient is an autogenerated mock type for the LomsClient type
type MockLomsClient struct {
	mock.Mock
}

// CancelOrder provides a mock function with given fields: ctx, in, opts
func (_m *MockLomsClient) CancelOrder(ctx context.Context, in *loms.CancelOrderRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *emptypb.Empty
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *loms.CancelOrderRequest, ...grpc.CallOption) (*emptypb.Empty, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *loms.CancelOrderRequest, ...grpc.CallOption) *emptypb.Empty); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*emptypb.Empty)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *loms.CancelOrderRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateOrder provides a mock function with given fields: ctx, in, opts
func (_m *MockLomsClient) CreateOrder(ctx context.Context, in *loms.CreateOrderRequest, opts ...grpc.CallOption) (*loms.CreateOrderResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *loms.CreateOrderResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *loms.CreateOrderRequest, ...grpc.CallOption) (*loms.CreateOrderResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *loms.CreateOrderRequest, ...grpc.CallOption) *loms.CreateOrderResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*loms.CreateOrderResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *loms.CreateOrderRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListOrder provides a mock function with given fields: ctx, in, opts
func (_m *MockLomsClient) ListOrder(ctx context.Context, in *loms.ListOrderRequest, opts ...grpc.CallOption) (*loms.ListOrderResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *loms.ListOrderResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *loms.ListOrderRequest, ...grpc.CallOption) (*loms.ListOrderResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *loms.ListOrderRequest, ...grpc.CallOption) *loms.ListOrderResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*loms.ListOrderResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *loms.ListOrderRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OrderPayed provides a mock function with given fields: ctx, in, opts
func (_m *MockLomsClient) OrderPayed(ctx context.Context, in *loms.OrderPayedRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *emptypb.Empty
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *loms.OrderPayedRequest, ...grpc.CallOption) (*emptypb.Empty, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *loms.OrderPayedRequest, ...grpc.CallOption) *emptypb.Empty); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*emptypb.Empty)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *loms.OrderPayedRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Stocks provides a mock function with given fields: ctx, in, opts
func (_m *MockLomsClient) Stocks(ctx context.Context, in *loms.StocksRequest, opts ...grpc.CallOption) (*loms.StocksResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *loms.StocksResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *loms.StocksRequest, ...grpc.CallOption) (*loms.StocksResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *loms.StocksRequest, ...grpc.CallOption) *loms.StocksResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*loms.StocksResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *loms.StocksRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockLomsClient creates a new instance of MockLomsClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockLomsClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockLomsClient {
	mock := &MockLomsClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
