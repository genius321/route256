package mocks

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

import (
	"context"
	"route256/checkout/internal/pkg/loms"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
	"google.golang.org/grpc"
	"google.golang.org/protobuf/types/known/emptypb"
)

// LomsClientMock implements service.LomsClient
type LomsClientMock struct {
	t minimock.Tester

	funcCancelOrder          func(ctx context.Context, in *loms.CancelOrderRequest, opts ...grpc.CallOption) (ep1 *emptypb.Empty, err error)
	inspectFuncCancelOrder   func(ctx context.Context, in *loms.CancelOrderRequest, opts ...grpc.CallOption)
	afterCancelOrderCounter  uint64
	beforeCancelOrderCounter uint64
	CancelOrderMock          mLomsClientMockCancelOrder

	funcCreateOrder          func(ctx context.Context, in *loms.CreateOrderRequest, opts ...grpc.CallOption) (cp1 *loms.CreateOrderResponse, err error)
	inspectFuncCreateOrder   func(ctx context.Context, in *loms.CreateOrderRequest, opts ...grpc.CallOption)
	afterCreateOrderCounter  uint64
	beforeCreateOrderCounter uint64
	CreateOrderMock          mLomsClientMockCreateOrder

	funcListOrder          func(ctx context.Context, in *loms.ListOrderRequest, opts ...grpc.CallOption) (lp1 *loms.ListOrderResponse, err error)
	inspectFuncListOrder   func(ctx context.Context, in *loms.ListOrderRequest, opts ...grpc.CallOption)
	afterListOrderCounter  uint64
	beforeListOrderCounter uint64
	ListOrderMock          mLomsClientMockListOrder

	funcOrderPayed          func(ctx context.Context, in *loms.OrderPayedRequest, opts ...grpc.CallOption) (ep1 *emptypb.Empty, err error)
	inspectFuncOrderPayed   func(ctx context.Context, in *loms.OrderPayedRequest, opts ...grpc.CallOption)
	afterOrderPayedCounter  uint64
	beforeOrderPayedCounter uint64
	OrderPayedMock          mLomsClientMockOrderPayed

	funcStocks          func(ctx context.Context, in *loms.StocksRequest, opts ...grpc.CallOption) (sp1 *loms.StocksResponse, err error)
	inspectFuncStocks   func(ctx context.Context, in *loms.StocksRequest, opts ...grpc.CallOption)
	afterStocksCounter  uint64
	beforeStocksCounter uint64
	StocksMock          mLomsClientMockStocks
}

// NewLomsClientMock returns a mock for service.LomsClient
func NewLomsClientMock(t minimock.Tester) *LomsClientMock {
	m := &LomsClientMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.CancelOrderMock = mLomsClientMockCancelOrder{mock: m}
	m.CancelOrderMock.callArgs = []*LomsClientMockCancelOrderParams{}

	m.CreateOrderMock = mLomsClientMockCreateOrder{mock: m}
	m.CreateOrderMock.callArgs = []*LomsClientMockCreateOrderParams{}

	m.ListOrderMock = mLomsClientMockListOrder{mock: m}
	m.ListOrderMock.callArgs = []*LomsClientMockListOrderParams{}

	m.OrderPayedMock = mLomsClientMockOrderPayed{mock: m}
	m.OrderPayedMock.callArgs = []*LomsClientMockOrderPayedParams{}

	m.StocksMock = mLomsClientMockStocks{mock: m}
	m.StocksMock.callArgs = []*LomsClientMockStocksParams{}

	return m
}

type mLomsClientMockCancelOrder struct {
	mock               *LomsClientMock
	defaultExpectation *LomsClientMockCancelOrderExpectation
	expectations       []*LomsClientMockCancelOrderExpectation

	callArgs []*LomsClientMockCancelOrderParams
	mutex    sync.RWMutex
}

// LomsClientMockCancelOrderExpectation specifies expectation struct of the LomsClient.CancelOrder
type LomsClientMockCancelOrderExpectation struct {
	mock    *LomsClientMock
	params  *LomsClientMockCancelOrderParams
	results *LomsClientMockCancelOrderResults
	Counter uint64
}

// LomsClientMockCancelOrderParams contains parameters of the LomsClient.CancelOrder
type LomsClientMockCancelOrderParams struct {
	ctx  context.Context
	in   *loms.CancelOrderRequest
	opts []grpc.CallOption
}

// LomsClientMockCancelOrderResults contains results of the LomsClient.CancelOrder
type LomsClientMockCancelOrderResults struct {
	ep1 *emptypb.Empty
	err error
}

// Expect sets up expected params for LomsClient.CancelOrder
func (mmCancelOrder *mLomsClientMockCancelOrder) Expect(ctx context.Context, in *loms.CancelOrderRequest, opts ...grpc.CallOption) *mLomsClientMockCancelOrder {
	if mmCancelOrder.mock.funcCancelOrder != nil {
		mmCancelOrder.mock.t.Fatalf("LomsClientMock.CancelOrder mock is already set by Set")
	}

	if mmCancelOrder.defaultExpectation == nil {
		mmCancelOrder.defaultExpectation = &LomsClientMockCancelOrderExpectation{}
	}

	mmCancelOrder.defaultExpectation.params = &LomsClientMockCancelOrderParams{ctx, in, opts}
	for _, e := range mmCancelOrder.expectations {
		if minimock.Equal(e.params, mmCancelOrder.defaultExpectation.params) {
			mmCancelOrder.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmCancelOrder.defaultExpectation.params)
		}
	}

	return mmCancelOrder
}

// Inspect accepts an inspector function that has same arguments as the LomsClient.CancelOrder
func (mmCancelOrder *mLomsClientMockCancelOrder) Inspect(f func(ctx context.Context, in *loms.CancelOrderRequest, opts ...grpc.CallOption)) *mLomsClientMockCancelOrder {
	if mmCancelOrder.mock.inspectFuncCancelOrder != nil {
		mmCancelOrder.mock.t.Fatalf("Inspect function is already set for LomsClientMock.CancelOrder")
	}

	mmCancelOrder.mock.inspectFuncCancelOrder = f

	return mmCancelOrder
}

// Return sets up results that will be returned by LomsClient.CancelOrder
func (mmCancelOrder *mLomsClientMockCancelOrder) Return(ep1 *emptypb.Empty, err error) *LomsClientMock {
	if mmCancelOrder.mock.funcCancelOrder != nil {
		mmCancelOrder.mock.t.Fatalf("LomsClientMock.CancelOrder mock is already set by Set")
	}

	if mmCancelOrder.defaultExpectation == nil {
		mmCancelOrder.defaultExpectation = &LomsClientMockCancelOrderExpectation{mock: mmCancelOrder.mock}
	}
	mmCancelOrder.defaultExpectation.results = &LomsClientMockCancelOrderResults{ep1, err}
	return mmCancelOrder.mock
}

// Set uses given function f to mock the LomsClient.CancelOrder method
func (mmCancelOrder *mLomsClientMockCancelOrder) Set(f func(ctx context.Context, in *loms.CancelOrderRequest, opts ...grpc.CallOption) (ep1 *emptypb.Empty, err error)) *LomsClientMock {
	if mmCancelOrder.defaultExpectation != nil {
		mmCancelOrder.mock.t.Fatalf("Default expectation is already set for the LomsClient.CancelOrder method")
	}

	if len(mmCancelOrder.expectations) > 0 {
		mmCancelOrder.mock.t.Fatalf("Some expectations are already set for the LomsClient.CancelOrder method")
	}

	mmCancelOrder.mock.funcCancelOrder = f
	return mmCancelOrder.mock
}

// When sets expectation for the LomsClient.CancelOrder which will trigger the result defined by the following
// Then helper
func (mmCancelOrder *mLomsClientMockCancelOrder) When(ctx context.Context, in *loms.CancelOrderRequest, opts ...grpc.CallOption) *LomsClientMockCancelOrderExpectation {
	if mmCancelOrder.mock.funcCancelOrder != nil {
		mmCancelOrder.mock.t.Fatalf("LomsClientMock.CancelOrder mock is already set by Set")
	}

	expectation := &LomsClientMockCancelOrderExpectation{
		mock:   mmCancelOrder.mock,
		params: &LomsClientMockCancelOrderParams{ctx, in, opts},
	}
	mmCancelOrder.expectations = append(mmCancelOrder.expectations, expectation)
	return expectation
}

// Then sets up LomsClient.CancelOrder return parameters for the expectation previously defined by the When method
func (e *LomsClientMockCancelOrderExpectation) Then(ep1 *emptypb.Empty, err error) *LomsClientMock {
	e.results = &LomsClientMockCancelOrderResults{ep1, err}
	return e.mock
}

// CancelOrder implements service.LomsClient
func (mmCancelOrder *LomsClientMock) CancelOrder(ctx context.Context, in *loms.CancelOrderRequest, opts ...grpc.CallOption) (ep1 *emptypb.Empty, err error) {
	mm_atomic.AddUint64(&mmCancelOrder.beforeCancelOrderCounter, 1)
	defer mm_atomic.AddUint64(&mmCancelOrder.afterCancelOrderCounter, 1)

	if mmCancelOrder.inspectFuncCancelOrder != nil {
		mmCancelOrder.inspectFuncCancelOrder(ctx, in, opts...)
	}

	mm_params := &LomsClientMockCancelOrderParams{ctx, in, opts}

	// Record call args
	mmCancelOrder.CancelOrderMock.mutex.Lock()
	mmCancelOrder.CancelOrderMock.callArgs = append(mmCancelOrder.CancelOrderMock.callArgs, mm_params)
	mmCancelOrder.CancelOrderMock.mutex.Unlock()

	for _, e := range mmCancelOrder.CancelOrderMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.ep1, e.results.err
		}
	}

	if mmCancelOrder.CancelOrderMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmCancelOrder.CancelOrderMock.defaultExpectation.Counter, 1)
		mm_want := mmCancelOrder.CancelOrderMock.defaultExpectation.params
		mm_got := LomsClientMockCancelOrderParams{ctx, in, opts}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmCancelOrder.t.Errorf("LomsClientMock.CancelOrder got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmCancelOrder.CancelOrderMock.defaultExpectation.results
		if mm_results == nil {
			mmCancelOrder.t.Fatal("No results are set for the LomsClientMock.CancelOrder")
		}
		return (*mm_results).ep1, (*mm_results).err
	}
	if mmCancelOrder.funcCancelOrder != nil {
		return mmCancelOrder.funcCancelOrder(ctx, in, opts...)
	}
	mmCancelOrder.t.Fatalf("Unexpected call to LomsClientMock.CancelOrder. %v %v %v", ctx, in, opts)
	return
}

// CancelOrderAfterCounter returns a count of finished LomsClientMock.CancelOrder invocations
func (mmCancelOrder *LomsClientMock) CancelOrderAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCancelOrder.afterCancelOrderCounter)
}

// CancelOrderBeforeCounter returns a count of LomsClientMock.CancelOrder invocations
func (mmCancelOrder *LomsClientMock) CancelOrderBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCancelOrder.beforeCancelOrderCounter)
}

// Calls returns a list of arguments used in each call to LomsClientMock.CancelOrder.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmCancelOrder *mLomsClientMockCancelOrder) Calls() []*LomsClientMockCancelOrderParams {
	mmCancelOrder.mutex.RLock()

	argCopy := make([]*LomsClientMockCancelOrderParams, len(mmCancelOrder.callArgs))
	copy(argCopy, mmCancelOrder.callArgs)

	mmCancelOrder.mutex.RUnlock()

	return argCopy
}

// MinimockCancelOrderDone returns true if the count of the CancelOrder invocations corresponds
// the number of defined expectations
func (m *LomsClientMock) MinimockCancelOrderDone() bool {
	for _, e := range m.CancelOrderMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.CancelOrderMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterCancelOrderCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCancelOrder != nil && mm_atomic.LoadUint64(&m.afterCancelOrderCounter) < 1 {
		return false
	}
	return true
}

// MinimockCancelOrderInspect logs each unmet expectation
func (m *LomsClientMock) MinimockCancelOrderInspect() {
	for _, e := range m.CancelOrderMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to LomsClientMock.CancelOrder with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.CancelOrderMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterCancelOrderCounter) < 1 {
		if m.CancelOrderMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to LomsClientMock.CancelOrder")
		} else {
			m.t.Errorf("Expected call to LomsClientMock.CancelOrder with params: %#v", *m.CancelOrderMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCancelOrder != nil && mm_atomic.LoadUint64(&m.afterCancelOrderCounter) < 1 {
		m.t.Error("Expected call to LomsClientMock.CancelOrder")
	}
}

type mLomsClientMockCreateOrder struct {
	mock               *LomsClientMock
	defaultExpectation *LomsClientMockCreateOrderExpectation
	expectations       []*LomsClientMockCreateOrderExpectation

	callArgs []*LomsClientMockCreateOrderParams
	mutex    sync.RWMutex
}

// LomsClientMockCreateOrderExpectation specifies expectation struct of the LomsClient.CreateOrder
type LomsClientMockCreateOrderExpectation struct {
	mock    *LomsClientMock
	params  *LomsClientMockCreateOrderParams
	results *LomsClientMockCreateOrderResults
	Counter uint64
}

// LomsClientMockCreateOrderParams contains parameters of the LomsClient.CreateOrder
type LomsClientMockCreateOrderParams struct {
	ctx  context.Context
	in   *loms.CreateOrderRequest
	opts []grpc.CallOption
}

// LomsClientMockCreateOrderResults contains results of the LomsClient.CreateOrder
type LomsClientMockCreateOrderResults struct {
	cp1 *loms.CreateOrderResponse
	err error
}

// Expect sets up expected params for LomsClient.CreateOrder
func (mmCreateOrder *mLomsClientMockCreateOrder) Expect(ctx context.Context, in *loms.CreateOrderRequest, opts ...grpc.CallOption) *mLomsClientMockCreateOrder {
	if mmCreateOrder.mock.funcCreateOrder != nil {
		mmCreateOrder.mock.t.Fatalf("LomsClientMock.CreateOrder mock is already set by Set")
	}

	if mmCreateOrder.defaultExpectation == nil {
		mmCreateOrder.defaultExpectation = &LomsClientMockCreateOrderExpectation{}
	}

	mmCreateOrder.defaultExpectation.params = &LomsClientMockCreateOrderParams{ctx, in, opts}
	for _, e := range mmCreateOrder.expectations {
		if minimock.Equal(e.params, mmCreateOrder.defaultExpectation.params) {
			mmCreateOrder.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmCreateOrder.defaultExpectation.params)
		}
	}

	return mmCreateOrder
}

// Inspect accepts an inspector function that has same arguments as the LomsClient.CreateOrder
func (mmCreateOrder *mLomsClientMockCreateOrder) Inspect(f func(ctx context.Context, in *loms.CreateOrderRequest, opts ...grpc.CallOption)) *mLomsClientMockCreateOrder {
	if mmCreateOrder.mock.inspectFuncCreateOrder != nil {
		mmCreateOrder.mock.t.Fatalf("Inspect function is already set for LomsClientMock.CreateOrder")
	}

	mmCreateOrder.mock.inspectFuncCreateOrder = f

	return mmCreateOrder
}

// Return sets up results that will be returned by LomsClient.CreateOrder
func (mmCreateOrder *mLomsClientMockCreateOrder) Return(cp1 *loms.CreateOrderResponse, err error) *LomsClientMock {
	if mmCreateOrder.mock.funcCreateOrder != nil {
		mmCreateOrder.mock.t.Fatalf("LomsClientMock.CreateOrder mock is already set by Set")
	}

	if mmCreateOrder.defaultExpectation == nil {
		mmCreateOrder.defaultExpectation = &LomsClientMockCreateOrderExpectation{mock: mmCreateOrder.mock}
	}
	mmCreateOrder.defaultExpectation.results = &LomsClientMockCreateOrderResults{cp1, err}
	return mmCreateOrder.mock
}

// Set uses given function f to mock the LomsClient.CreateOrder method
func (mmCreateOrder *mLomsClientMockCreateOrder) Set(f func(ctx context.Context, in *loms.CreateOrderRequest, opts ...grpc.CallOption) (cp1 *loms.CreateOrderResponse, err error)) *LomsClientMock {
	if mmCreateOrder.defaultExpectation != nil {
		mmCreateOrder.mock.t.Fatalf("Default expectation is already set for the LomsClient.CreateOrder method")
	}

	if len(mmCreateOrder.expectations) > 0 {
		mmCreateOrder.mock.t.Fatalf("Some expectations are already set for the LomsClient.CreateOrder method")
	}

	mmCreateOrder.mock.funcCreateOrder = f
	return mmCreateOrder.mock
}

// When sets expectation for the LomsClient.CreateOrder which will trigger the result defined by the following
// Then helper
func (mmCreateOrder *mLomsClientMockCreateOrder) When(ctx context.Context, in *loms.CreateOrderRequest, opts ...grpc.CallOption) *LomsClientMockCreateOrderExpectation {
	if mmCreateOrder.mock.funcCreateOrder != nil {
		mmCreateOrder.mock.t.Fatalf("LomsClientMock.CreateOrder mock is already set by Set")
	}

	expectation := &LomsClientMockCreateOrderExpectation{
		mock:   mmCreateOrder.mock,
		params: &LomsClientMockCreateOrderParams{ctx, in, opts},
	}
	mmCreateOrder.expectations = append(mmCreateOrder.expectations, expectation)
	return expectation
}

// Then sets up LomsClient.CreateOrder return parameters for the expectation previously defined by the When method
func (e *LomsClientMockCreateOrderExpectation) Then(cp1 *loms.CreateOrderResponse, err error) *LomsClientMock {
	e.results = &LomsClientMockCreateOrderResults{cp1, err}
	return e.mock
}

// CreateOrder implements service.LomsClient
func (mmCreateOrder *LomsClientMock) CreateOrder(ctx context.Context, in *loms.CreateOrderRequest, opts ...grpc.CallOption) (cp1 *loms.CreateOrderResponse, err error) {
	mm_atomic.AddUint64(&mmCreateOrder.beforeCreateOrderCounter, 1)
	defer mm_atomic.AddUint64(&mmCreateOrder.afterCreateOrderCounter, 1)

	if mmCreateOrder.inspectFuncCreateOrder != nil {
		mmCreateOrder.inspectFuncCreateOrder(ctx, in, opts...)
	}

	mm_params := &LomsClientMockCreateOrderParams{ctx, in, opts}

	// Record call args
	mmCreateOrder.CreateOrderMock.mutex.Lock()
	mmCreateOrder.CreateOrderMock.callArgs = append(mmCreateOrder.CreateOrderMock.callArgs, mm_params)
	mmCreateOrder.CreateOrderMock.mutex.Unlock()

	for _, e := range mmCreateOrder.CreateOrderMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.cp1, e.results.err
		}
	}

	if mmCreateOrder.CreateOrderMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmCreateOrder.CreateOrderMock.defaultExpectation.Counter, 1)
		mm_want := mmCreateOrder.CreateOrderMock.defaultExpectation.params
		mm_got := LomsClientMockCreateOrderParams{ctx, in, opts}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmCreateOrder.t.Errorf("LomsClientMock.CreateOrder got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmCreateOrder.CreateOrderMock.defaultExpectation.results
		if mm_results == nil {
			mmCreateOrder.t.Fatal("No results are set for the LomsClientMock.CreateOrder")
		}
		return (*mm_results).cp1, (*mm_results).err
	}
	if mmCreateOrder.funcCreateOrder != nil {
		return mmCreateOrder.funcCreateOrder(ctx, in, opts...)
	}
	mmCreateOrder.t.Fatalf("Unexpected call to LomsClientMock.CreateOrder. %v %v %v", ctx, in, opts)
	return
}

// CreateOrderAfterCounter returns a count of finished LomsClientMock.CreateOrder invocations
func (mmCreateOrder *LomsClientMock) CreateOrderAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreateOrder.afterCreateOrderCounter)
}

// CreateOrderBeforeCounter returns a count of LomsClientMock.CreateOrder invocations
func (mmCreateOrder *LomsClientMock) CreateOrderBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreateOrder.beforeCreateOrderCounter)
}

// Calls returns a list of arguments used in each call to LomsClientMock.CreateOrder.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmCreateOrder *mLomsClientMockCreateOrder) Calls() []*LomsClientMockCreateOrderParams {
	mmCreateOrder.mutex.RLock()

	argCopy := make([]*LomsClientMockCreateOrderParams, len(mmCreateOrder.callArgs))
	copy(argCopy, mmCreateOrder.callArgs)

	mmCreateOrder.mutex.RUnlock()

	return argCopy
}

// MinimockCreateOrderDone returns true if the count of the CreateOrder invocations corresponds
// the number of defined expectations
func (m *LomsClientMock) MinimockCreateOrderDone() bool {
	for _, e := range m.CreateOrderMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.CreateOrderMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterCreateOrderCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCreateOrder != nil && mm_atomic.LoadUint64(&m.afterCreateOrderCounter) < 1 {
		return false
	}
	return true
}

// MinimockCreateOrderInspect logs each unmet expectation
func (m *LomsClientMock) MinimockCreateOrderInspect() {
	for _, e := range m.CreateOrderMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to LomsClientMock.CreateOrder with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.CreateOrderMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterCreateOrderCounter) < 1 {
		if m.CreateOrderMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to LomsClientMock.CreateOrder")
		} else {
			m.t.Errorf("Expected call to LomsClientMock.CreateOrder with params: %#v", *m.CreateOrderMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCreateOrder != nil && mm_atomic.LoadUint64(&m.afterCreateOrderCounter) < 1 {
		m.t.Error("Expected call to LomsClientMock.CreateOrder")
	}
}

type mLomsClientMockListOrder struct {
	mock               *LomsClientMock
	defaultExpectation *LomsClientMockListOrderExpectation
	expectations       []*LomsClientMockListOrderExpectation

	callArgs []*LomsClientMockListOrderParams
	mutex    sync.RWMutex
}

// LomsClientMockListOrderExpectation specifies expectation struct of the LomsClient.ListOrder
type LomsClientMockListOrderExpectation struct {
	mock    *LomsClientMock
	params  *LomsClientMockListOrderParams
	results *LomsClientMockListOrderResults
	Counter uint64
}

// LomsClientMockListOrderParams contains parameters of the LomsClient.ListOrder
type LomsClientMockListOrderParams struct {
	ctx  context.Context
	in   *loms.ListOrderRequest
	opts []grpc.CallOption
}

// LomsClientMockListOrderResults contains results of the LomsClient.ListOrder
type LomsClientMockListOrderResults struct {
	lp1 *loms.ListOrderResponse
	err error
}

// Expect sets up expected params for LomsClient.ListOrder
func (mmListOrder *mLomsClientMockListOrder) Expect(ctx context.Context, in *loms.ListOrderRequest, opts ...grpc.CallOption) *mLomsClientMockListOrder {
	if mmListOrder.mock.funcListOrder != nil {
		mmListOrder.mock.t.Fatalf("LomsClientMock.ListOrder mock is already set by Set")
	}

	if mmListOrder.defaultExpectation == nil {
		mmListOrder.defaultExpectation = &LomsClientMockListOrderExpectation{}
	}

	mmListOrder.defaultExpectation.params = &LomsClientMockListOrderParams{ctx, in, opts}
	for _, e := range mmListOrder.expectations {
		if minimock.Equal(e.params, mmListOrder.defaultExpectation.params) {
			mmListOrder.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmListOrder.defaultExpectation.params)
		}
	}

	return mmListOrder
}

// Inspect accepts an inspector function that has same arguments as the LomsClient.ListOrder
func (mmListOrder *mLomsClientMockListOrder) Inspect(f func(ctx context.Context, in *loms.ListOrderRequest, opts ...grpc.CallOption)) *mLomsClientMockListOrder {
	if mmListOrder.mock.inspectFuncListOrder != nil {
		mmListOrder.mock.t.Fatalf("Inspect function is already set for LomsClientMock.ListOrder")
	}

	mmListOrder.mock.inspectFuncListOrder = f

	return mmListOrder
}

// Return sets up results that will be returned by LomsClient.ListOrder
func (mmListOrder *mLomsClientMockListOrder) Return(lp1 *loms.ListOrderResponse, err error) *LomsClientMock {
	if mmListOrder.mock.funcListOrder != nil {
		mmListOrder.mock.t.Fatalf("LomsClientMock.ListOrder mock is already set by Set")
	}

	if mmListOrder.defaultExpectation == nil {
		mmListOrder.defaultExpectation = &LomsClientMockListOrderExpectation{mock: mmListOrder.mock}
	}
	mmListOrder.defaultExpectation.results = &LomsClientMockListOrderResults{lp1, err}
	return mmListOrder.mock
}

// Set uses given function f to mock the LomsClient.ListOrder method
func (mmListOrder *mLomsClientMockListOrder) Set(f func(ctx context.Context, in *loms.ListOrderRequest, opts ...grpc.CallOption) (lp1 *loms.ListOrderResponse, err error)) *LomsClientMock {
	if mmListOrder.defaultExpectation != nil {
		mmListOrder.mock.t.Fatalf("Default expectation is already set for the LomsClient.ListOrder method")
	}

	if len(mmListOrder.expectations) > 0 {
		mmListOrder.mock.t.Fatalf("Some expectations are already set for the LomsClient.ListOrder method")
	}

	mmListOrder.mock.funcListOrder = f
	return mmListOrder.mock
}

// When sets expectation for the LomsClient.ListOrder which will trigger the result defined by the following
// Then helper
func (mmListOrder *mLomsClientMockListOrder) When(ctx context.Context, in *loms.ListOrderRequest, opts ...grpc.CallOption) *LomsClientMockListOrderExpectation {
	if mmListOrder.mock.funcListOrder != nil {
		mmListOrder.mock.t.Fatalf("LomsClientMock.ListOrder mock is already set by Set")
	}

	expectation := &LomsClientMockListOrderExpectation{
		mock:   mmListOrder.mock,
		params: &LomsClientMockListOrderParams{ctx, in, opts},
	}
	mmListOrder.expectations = append(mmListOrder.expectations, expectation)
	return expectation
}

// Then sets up LomsClient.ListOrder return parameters for the expectation previously defined by the When method
func (e *LomsClientMockListOrderExpectation) Then(lp1 *loms.ListOrderResponse, err error) *LomsClientMock {
	e.results = &LomsClientMockListOrderResults{lp1, err}
	return e.mock
}

// ListOrder implements service.LomsClient
func (mmListOrder *LomsClientMock) ListOrder(ctx context.Context, in *loms.ListOrderRequest, opts ...grpc.CallOption) (lp1 *loms.ListOrderResponse, err error) {
	mm_atomic.AddUint64(&mmListOrder.beforeListOrderCounter, 1)
	defer mm_atomic.AddUint64(&mmListOrder.afterListOrderCounter, 1)

	if mmListOrder.inspectFuncListOrder != nil {
		mmListOrder.inspectFuncListOrder(ctx, in, opts...)
	}

	mm_params := &LomsClientMockListOrderParams{ctx, in, opts}

	// Record call args
	mmListOrder.ListOrderMock.mutex.Lock()
	mmListOrder.ListOrderMock.callArgs = append(mmListOrder.ListOrderMock.callArgs, mm_params)
	mmListOrder.ListOrderMock.mutex.Unlock()

	for _, e := range mmListOrder.ListOrderMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.lp1, e.results.err
		}
	}

	if mmListOrder.ListOrderMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmListOrder.ListOrderMock.defaultExpectation.Counter, 1)
		mm_want := mmListOrder.ListOrderMock.defaultExpectation.params
		mm_got := LomsClientMockListOrderParams{ctx, in, opts}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmListOrder.t.Errorf("LomsClientMock.ListOrder got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmListOrder.ListOrderMock.defaultExpectation.results
		if mm_results == nil {
			mmListOrder.t.Fatal("No results are set for the LomsClientMock.ListOrder")
		}
		return (*mm_results).lp1, (*mm_results).err
	}
	if mmListOrder.funcListOrder != nil {
		return mmListOrder.funcListOrder(ctx, in, opts...)
	}
	mmListOrder.t.Fatalf("Unexpected call to LomsClientMock.ListOrder. %v %v %v", ctx, in, opts)
	return
}

// ListOrderAfterCounter returns a count of finished LomsClientMock.ListOrder invocations
func (mmListOrder *LomsClientMock) ListOrderAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmListOrder.afterListOrderCounter)
}

// ListOrderBeforeCounter returns a count of LomsClientMock.ListOrder invocations
func (mmListOrder *LomsClientMock) ListOrderBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmListOrder.beforeListOrderCounter)
}

// Calls returns a list of arguments used in each call to LomsClientMock.ListOrder.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmListOrder *mLomsClientMockListOrder) Calls() []*LomsClientMockListOrderParams {
	mmListOrder.mutex.RLock()

	argCopy := make([]*LomsClientMockListOrderParams, len(mmListOrder.callArgs))
	copy(argCopy, mmListOrder.callArgs)

	mmListOrder.mutex.RUnlock()

	return argCopy
}

// MinimockListOrderDone returns true if the count of the ListOrder invocations corresponds
// the number of defined expectations
func (m *LomsClientMock) MinimockListOrderDone() bool {
	for _, e := range m.ListOrderMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ListOrderMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterListOrderCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcListOrder != nil && mm_atomic.LoadUint64(&m.afterListOrderCounter) < 1 {
		return false
	}
	return true
}

// MinimockListOrderInspect logs each unmet expectation
func (m *LomsClientMock) MinimockListOrderInspect() {
	for _, e := range m.ListOrderMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to LomsClientMock.ListOrder with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ListOrderMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterListOrderCounter) < 1 {
		if m.ListOrderMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to LomsClientMock.ListOrder")
		} else {
			m.t.Errorf("Expected call to LomsClientMock.ListOrder with params: %#v", *m.ListOrderMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcListOrder != nil && mm_atomic.LoadUint64(&m.afterListOrderCounter) < 1 {
		m.t.Error("Expected call to LomsClientMock.ListOrder")
	}
}

type mLomsClientMockOrderPayed struct {
	mock               *LomsClientMock
	defaultExpectation *LomsClientMockOrderPayedExpectation
	expectations       []*LomsClientMockOrderPayedExpectation

	callArgs []*LomsClientMockOrderPayedParams
	mutex    sync.RWMutex
}

// LomsClientMockOrderPayedExpectation specifies expectation struct of the LomsClient.OrderPayed
type LomsClientMockOrderPayedExpectation struct {
	mock    *LomsClientMock
	params  *LomsClientMockOrderPayedParams
	results *LomsClientMockOrderPayedResults
	Counter uint64
}

// LomsClientMockOrderPayedParams contains parameters of the LomsClient.OrderPayed
type LomsClientMockOrderPayedParams struct {
	ctx  context.Context
	in   *loms.OrderPayedRequest
	opts []grpc.CallOption
}

// LomsClientMockOrderPayedResults contains results of the LomsClient.OrderPayed
type LomsClientMockOrderPayedResults struct {
	ep1 *emptypb.Empty
	err error
}

// Expect sets up expected params for LomsClient.OrderPayed
func (mmOrderPayed *mLomsClientMockOrderPayed) Expect(ctx context.Context, in *loms.OrderPayedRequest, opts ...grpc.CallOption) *mLomsClientMockOrderPayed {
	if mmOrderPayed.mock.funcOrderPayed != nil {
		mmOrderPayed.mock.t.Fatalf("LomsClientMock.OrderPayed mock is already set by Set")
	}

	if mmOrderPayed.defaultExpectation == nil {
		mmOrderPayed.defaultExpectation = &LomsClientMockOrderPayedExpectation{}
	}

	mmOrderPayed.defaultExpectation.params = &LomsClientMockOrderPayedParams{ctx, in, opts}
	for _, e := range mmOrderPayed.expectations {
		if minimock.Equal(e.params, mmOrderPayed.defaultExpectation.params) {
			mmOrderPayed.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmOrderPayed.defaultExpectation.params)
		}
	}

	return mmOrderPayed
}

// Inspect accepts an inspector function that has same arguments as the LomsClient.OrderPayed
func (mmOrderPayed *mLomsClientMockOrderPayed) Inspect(f func(ctx context.Context, in *loms.OrderPayedRequest, opts ...grpc.CallOption)) *mLomsClientMockOrderPayed {
	if mmOrderPayed.mock.inspectFuncOrderPayed != nil {
		mmOrderPayed.mock.t.Fatalf("Inspect function is already set for LomsClientMock.OrderPayed")
	}

	mmOrderPayed.mock.inspectFuncOrderPayed = f

	return mmOrderPayed
}

// Return sets up results that will be returned by LomsClient.OrderPayed
func (mmOrderPayed *mLomsClientMockOrderPayed) Return(ep1 *emptypb.Empty, err error) *LomsClientMock {
	if mmOrderPayed.mock.funcOrderPayed != nil {
		mmOrderPayed.mock.t.Fatalf("LomsClientMock.OrderPayed mock is already set by Set")
	}

	if mmOrderPayed.defaultExpectation == nil {
		mmOrderPayed.defaultExpectation = &LomsClientMockOrderPayedExpectation{mock: mmOrderPayed.mock}
	}
	mmOrderPayed.defaultExpectation.results = &LomsClientMockOrderPayedResults{ep1, err}
	return mmOrderPayed.mock
}

// Set uses given function f to mock the LomsClient.OrderPayed method
func (mmOrderPayed *mLomsClientMockOrderPayed) Set(f func(ctx context.Context, in *loms.OrderPayedRequest, opts ...grpc.CallOption) (ep1 *emptypb.Empty, err error)) *LomsClientMock {
	if mmOrderPayed.defaultExpectation != nil {
		mmOrderPayed.mock.t.Fatalf("Default expectation is already set for the LomsClient.OrderPayed method")
	}

	if len(mmOrderPayed.expectations) > 0 {
		mmOrderPayed.mock.t.Fatalf("Some expectations are already set for the LomsClient.OrderPayed method")
	}

	mmOrderPayed.mock.funcOrderPayed = f
	return mmOrderPayed.mock
}

// When sets expectation for the LomsClient.OrderPayed which will trigger the result defined by the following
// Then helper
func (mmOrderPayed *mLomsClientMockOrderPayed) When(ctx context.Context, in *loms.OrderPayedRequest, opts ...grpc.CallOption) *LomsClientMockOrderPayedExpectation {
	if mmOrderPayed.mock.funcOrderPayed != nil {
		mmOrderPayed.mock.t.Fatalf("LomsClientMock.OrderPayed mock is already set by Set")
	}

	expectation := &LomsClientMockOrderPayedExpectation{
		mock:   mmOrderPayed.mock,
		params: &LomsClientMockOrderPayedParams{ctx, in, opts},
	}
	mmOrderPayed.expectations = append(mmOrderPayed.expectations, expectation)
	return expectation
}

// Then sets up LomsClient.OrderPayed return parameters for the expectation previously defined by the When method
func (e *LomsClientMockOrderPayedExpectation) Then(ep1 *emptypb.Empty, err error) *LomsClientMock {
	e.results = &LomsClientMockOrderPayedResults{ep1, err}
	return e.mock
}

// OrderPayed implements service.LomsClient
func (mmOrderPayed *LomsClientMock) OrderPayed(ctx context.Context, in *loms.OrderPayedRequest, opts ...grpc.CallOption) (ep1 *emptypb.Empty, err error) {
	mm_atomic.AddUint64(&mmOrderPayed.beforeOrderPayedCounter, 1)
	defer mm_atomic.AddUint64(&mmOrderPayed.afterOrderPayedCounter, 1)

	if mmOrderPayed.inspectFuncOrderPayed != nil {
		mmOrderPayed.inspectFuncOrderPayed(ctx, in, opts...)
	}

	mm_params := &LomsClientMockOrderPayedParams{ctx, in, opts}

	// Record call args
	mmOrderPayed.OrderPayedMock.mutex.Lock()
	mmOrderPayed.OrderPayedMock.callArgs = append(mmOrderPayed.OrderPayedMock.callArgs, mm_params)
	mmOrderPayed.OrderPayedMock.mutex.Unlock()

	for _, e := range mmOrderPayed.OrderPayedMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.ep1, e.results.err
		}
	}

	if mmOrderPayed.OrderPayedMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmOrderPayed.OrderPayedMock.defaultExpectation.Counter, 1)
		mm_want := mmOrderPayed.OrderPayedMock.defaultExpectation.params
		mm_got := LomsClientMockOrderPayedParams{ctx, in, opts}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmOrderPayed.t.Errorf("LomsClientMock.OrderPayed got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmOrderPayed.OrderPayedMock.defaultExpectation.results
		if mm_results == nil {
			mmOrderPayed.t.Fatal("No results are set for the LomsClientMock.OrderPayed")
		}
		return (*mm_results).ep1, (*mm_results).err
	}
	if mmOrderPayed.funcOrderPayed != nil {
		return mmOrderPayed.funcOrderPayed(ctx, in, opts...)
	}
	mmOrderPayed.t.Fatalf("Unexpected call to LomsClientMock.OrderPayed. %v %v %v", ctx, in, opts)
	return
}

// OrderPayedAfterCounter returns a count of finished LomsClientMock.OrderPayed invocations
func (mmOrderPayed *LomsClientMock) OrderPayedAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmOrderPayed.afterOrderPayedCounter)
}

// OrderPayedBeforeCounter returns a count of LomsClientMock.OrderPayed invocations
func (mmOrderPayed *LomsClientMock) OrderPayedBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmOrderPayed.beforeOrderPayedCounter)
}

// Calls returns a list of arguments used in each call to LomsClientMock.OrderPayed.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmOrderPayed *mLomsClientMockOrderPayed) Calls() []*LomsClientMockOrderPayedParams {
	mmOrderPayed.mutex.RLock()

	argCopy := make([]*LomsClientMockOrderPayedParams, len(mmOrderPayed.callArgs))
	copy(argCopy, mmOrderPayed.callArgs)

	mmOrderPayed.mutex.RUnlock()

	return argCopy
}

// MinimockOrderPayedDone returns true if the count of the OrderPayed invocations corresponds
// the number of defined expectations
func (m *LomsClientMock) MinimockOrderPayedDone() bool {
	for _, e := range m.OrderPayedMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.OrderPayedMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterOrderPayedCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcOrderPayed != nil && mm_atomic.LoadUint64(&m.afterOrderPayedCounter) < 1 {
		return false
	}
	return true
}

// MinimockOrderPayedInspect logs each unmet expectation
func (m *LomsClientMock) MinimockOrderPayedInspect() {
	for _, e := range m.OrderPayedMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to LomsClientMock.OrderPayed with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.OrderPayedMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterOrderPayedCounter) < 1 {
		if m.OrderPayedMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to LomsClientMock.OrderPayed")
		} else {
			m.t.Errorf("Expected call to LomsClientMock.OrderPayed with params: %#v", *m.OrderPayedMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcOrderPayed != nil && mm_atomic.LoadUint64(&m.afterOrderPayedCounter) < 1 {
		m.t.Error("Expected call to LomsClientMock.OrderPayed")
	}
}

type mLomsClientMockStocks struct {
	mock               *LomsClientMock
	defaultExpectation *LomsClientMockStocksExpectation
	expectations       []*LomsClientMockStocksExpectation

	callArgs []*LomsClientMockStocksParams
	mutex    sync.RWMutex
}

// LomsClientMockStocksExpectation specifies expectation struct of the LomsClient.Stocks
type LomsClientMockStocksExpectation struct {
	mock    *LomsClientMock
	params  *LomsClientMockStocksParams
	results *LomsClientMockStocksResults
	Counter uint64
}

// LomsClientMockStocksParams contains parameters of the LomsClient.Stocks
type LomsClientMockStocksParams struct {
	ctx  context.Context
	in   *loms.StocksRequest
	opts []grpc.CallOption
}

// LomsClientMockStocksResults contains results of the LomsClient.Stocks
type LomsClientMockStocksResults struct {
	sp1 *loms.StocksResponse
	err error
}

// Expect sets up expected params for LomsClient.Stocks
func (mmStocks *mLomsClientMockStocks) Expect(ctx context.Context, in *loms.StocksRequest, opts ...grpc.CallOption) *mLomsClientMockStocks {
	if mmStocks.mock.funcStocks != nil {
		mmStocks.mock.t.Fatalf("LomsClientMock.Stocks mock is already set by Set")
	}

	if mmStocks.defaultExpectation == nil {
		mmStocks.defaultExpectation = &LomsClientMockStocksExpectation{}
	}

	mmStocks.defaultExpectation.params = &LomsClientMockStocksParams{ctx, in, opts}
	for _, e := range mmStocks.expectations {
		if minimock.Equal(e.params, mmStocks.defaultExpectation.params) {
			mmStocks.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmStocks.defaultExpectation.params)
		}
	}

	return mmStocks
}

// Inspect accepts an inspector function that has same arguments as the LomsClient.Stocks
func (mmStocks *mLomsClientMockStocks) Inspect(f func(ctx context.Context, in *loms.StocksRequest, opts ...grpc.CallOption)) *mLomsClientMockStocks {
	if mmStocks.mock.inspectFuncStocks != nil {
		mmStocks.mock.t.Fatalf("Inspect function is already set for LomsClientMock.Stocks")
	}

	mmStocks.mock.inspectFuncStocks = f

	return mmStocks
}

// Return sets up results that will be returned by LomsClient.Stocks
func (mmStocks *mLomsClientMockStocks) Return(sp1 *loms.StocksResponse, err error) *LomsClientMock {
	if mmStocks.mock.funcStocks != nil {
		mmStocks.mock.t.Fatalf("LomsClientMock.Stocks mock is already set by Set")
	}

	if mmStocks.defaultExpectation == nil {
		mmStocks.defaultExpectation = &LomsClientMockStocksExpectation{mock: mmStocks.mock}
	}
	mmStocks.defaultExpectation.results = &LomsClientMockStocksResults{sp1, err}
	return mmStocks.mock
}

// Set uses given function f to mock the LomsClient.Stocks method
func (mmStocks *mLomsClientMockStocks) Set(f func(ctx context.Context, in *loms.StocksRequest, opts ...grpc.CallOption) (sp1 *loms.StocksResponse, err error)) *LomsClientMock {
	if mmStocks.defaultExpectation != nil {
		mmStocks.mock.t.Fatalf("Default expectation is already set for the LomsClient.Stocks method")
	}

	if len(mmStocks.expectations) > 0 {
		mmStocks.mock.t.Fatalf("Some expectations are already set for the LomsClient.Stocks method")
	}

	mmStocks.mock.funcStocks = f
	return mmStocks.mock
}

// When sets expectation for the LomsClient.Stocks which will trigger the result defined by the following
// Then helper
func (mmStocks *mLomsClientMockStocks) When(ctx context.Context, in *loms.StocksRequest, opts ...grpc.CallOption) *LomsClientMockStocksExpectation {
	if mmStocks.mock.funcStocks != nil {
		mmStocks.mock.t.Fatalf("LomsClientMock.Stocks mock is already set by Set")
	}

	expectation := &LomsClientMockStocksExpectation{
		mock:   mmStocks.mock,
		params: &LomsClientMockStocksParams{ctx, in, opts},
	}
	mmStocks.expectations = append(mmStocks.expectations, expectation)
	return expectation
}

// Then sets up LomsClient.Stocks return parameters for the expectation previously defined by the When method
func (e *LomsClientMockStocksExpectation) Then(sp1 *loms.StocksResponse, err error) *LomsClientMock {
	e.results = &LomsClientMockStocksResults{sp1, err}
	return e.mock
}

// Stocks implements service.LomsClient
func (mmStocks *LomsClientMock) Stocks(ctx context.Context, in *loms.StocksRequest, opts ...grpc.CallOption) (sp1 *loms.StocksResponse, err error) {
	mm_atomic.AddUint64(&mmStocks.beforeStocksCounter, 1)
	defer mm_atomic.AddUint64(&mmStocks.afterStocksCounter, 1)

	if mmStocks.inspectFuncStocks != nil {
		mmStocks.inspectFuncStocks(ctx, in, opts...)
	}

	mm_params := &LomsClientMockStocksParams{ctx, in, opts}

	// Record call args
	mmStocks.StocksMock.mutex.Lock()
	mmStocks.StocksMock.callArgs = append(mmStocks.StocksMock.callArgs, mm_params)
	mmStocks.StocksMock.mutex.Unlock()

	for _, e := range mmStocks.StocksMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.sp1, e.results.err
		}
	}

	if mmStocks.StocksMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmStocks.StocksMock.defaultExpectation.Counter, 1)
		mm_want := mmStocks.StocksMock.defaultExpectation.params
		mm_got := LomsClientMockStocksParams{ctx, in, opts}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmStocks.t.Errorf("LomsClientMock.Stocks got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmStocks.StocksMock.defaultExpectation.results
		if mm_results == nil {
			mmStocks.t.Fatal("No results are set for the LomsClientMock.Stocks")
		}
		return (*mm_results).sp1, (*mm_results).err
	}
	if mmStocks.funcStocks != nil {
		return mmStocks.funcStocks(ctx, in, opts...)
	}
	mmStocks.t.Fatalf("Unexpected call to LomsClientMock.Stocks. %v %v %v", ctx, in, opts)
	return
}

// StocksAfterCounter returns a count of finished LomsClientMock.Stocks invocations
func (mmStocks *LomsClientMock) StocksAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmStocks.afterStocksCounter)
}

// StocksBeforeCounter returns a count of LomsClientMock.Stocks invocations
func (mmStocks *LomsClientMock) StocksBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmStocks.beforeStocksCounter)
}

// Calls returns a list of arguments used in each call to LomsClientMock.Stocks.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmStocks *mLomsClientMockStocks) Calls() []*LomsClientMockStocksParams {
	mmStocks.mutex.RLock()

	argCopy := make([]*LomsClientMockStocksParams, len(mmStocks.callArgs))
	copy(argCopy, mmStocks.callArgs)

	mmStocks.mutex.RUnlock()

	return argCopy
}

// MinimockStocksDone returns true if the count of the Stocks invocations corresponds
// the number of defined expectations
func (m *LomsClientMock) MinimockStocksDone() bool {
	for _, e := range m.StocksMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.StocksMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterStocksCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcStocks != nil && mm_atomic.LoadUint64(&m.afterStocksCounter) < 1 {
		return false
	}
	return true
}

// MinimockStocksInspect logs each unmet expectation
func (m *LomsClientMock) MinimockStocksInspect() {
	for _, e := range m.StocksMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to LomsClientMock.Stocks with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.StocksMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterStocksCounter) < 1 {
		if m.StocksMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to LomsClientMock.Stocks")
		} else {
			m.t.Errorf("Expected call to LomsClientMock.Stocks with params: %#v", *m.StocksMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcStocks != nil && mm_atomic.LoadUint64(&m.afterStocksCounter) < 1 {
		m.t.Error("Expected call to LomsClientMock.Stocks")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *LomsClientMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockCancelOrderInspect()

		m.MinimockCreateOrderInspect()

		m.MinimockListOrderInspect()

		m.MinimockOrderPayedInspect()

		m.MinimockStocksInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *LomsClientMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *LomsClientMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockCancelOrderDone() &&
		m.MinimockCreateOrderDone() &&
		m.MinimockListOrderDone() &&
		m.MinimockOrderPayedDone() &&
		m.MinimockStocksDone()
}
