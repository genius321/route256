// Code generated by mockery v2.30.1. DO NOT EDIT.

package service

import (
	context "context"
	checkout "route256/checkout/internal/pkg/checkout"

	emptypb "google.golang.org/protobuf/types/known/emptypb"

	mock "github.com/stretchr/testify/mock"

	schema "route256/checkout/internal/repository/schema"
)

// MockRepository is an autogenerated mock type for the Repository type
type MockRepository struct {
	mock.Mock
}

// AddToCart provides a mock function with given fields: ctx, req
func (_m *MockRepository) AddToCart(ctx context.Context, req *checkout.AddToCartRequest) (*emptypb.Empty, error) {
	ret := _m.Called(ctx, req)

	var r0 *emptypb.Empty
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *checkout.AddToCartRequest) (*emptypb.Empty, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *checkout.AddToCartRequest) *emptypb.Empty); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*emptypb.Empty)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *checkout.AddToCartRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAllFromCart provides a mock function with given fields: ctx, req
func (_m *MockRepository) DeleteAllFromCart(ctx context.Context, req *checkout.DeleteFromCartRequest) (*emptypb.Empty, error) {
	ret := _m.Called(ctx, req)

	var r0 *emptypb.Empty
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *checkout.DeleteFromCartRequest) (*emptypb.Empty, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *checkout.DeleteFromCartRequest) *emptypb.Empty); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*emptypb.Empty)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *checkout.DeleteFromCartRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteFromCart provides a mock function with given fields: ctx, req
func (_m *MockRepository) DeleteFromCart(ctx context.Context, req *checkout.DeleteFromCartRequest) (*emptypb.Empty, error) {
	ret := _m.Called(ctx, req)

	var r0 *emptypb.Empty
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *checkout.DeleteFromCartRequest) (*emptypb.Empty, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *checkout.DeleteFromCartRequest) *emptypb.Empty); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*emptypb.Empty)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *checkout.DeleteFromCartRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListCart provides a mock function with given fields: ctx, req
func (_m *MockRepository) ListCart(ctx context.Context, req *checkout.ListCartRequest) ([]*schema.Item, error) {
	ret := _m.Called(ctx, req)

	var r0 []*schema.Item
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *checkout.ListCartRequest) ([]*schema.Item, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *checkout.ListCartRequest) []*schema.Item); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*schema.Item)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *checkout.ListCartRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SubFromCart provides a mock function with given fields: ctx, userId, sku, count
func (_m *MockRepository) SubFromCart(ctx context.Context, userId int64, sku int64, count int64) error {
	ret := _m.Called(ctx, userId, sku, count)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64, int64) error); ok {
		r0 = rf(ctx, userId, sku, count)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TakeCountSkuUserFromCart provides a mock function with given fields: ctx, userId, sku
func (_m *MockRepository) TakeCountSkuUserFromCart(ctx context.Context, userId int64, sku int64) (int64, error) {
	ret := _m.Called(ctx, userId, sku)

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) (int64, error)); ok {
		return rf(ctx, userId, sku)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) int64); ok {
		r0 = rf(ctx, userId, sku)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, int64) error); ok {
		r1 = rf(ctx, userId, sku)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockRepository creates a new instance of MockRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRepository {
	mock := &MockRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
