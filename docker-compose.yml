version: "3.3"

networks:
  net:
    driver: bridge

services:
  # checkout's database
  postgres-checkout:
    image: postgres:15.1
    environment:
      POSTGRES_DB: checkout
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      PGDATA: "/var/lib/postgresql/data/.pgdata"
    volumes:
      - ./checkout:/var/lib/postgresql/data
    ports:
      - 5433:5432
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d checkout"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 4G
    networks:
      - net
  # checkout service
  checkout:
    image: checkout
    build: ./checkout/
    environment:
      CHECKOUT_DATABASE_URL: postgres://user:password@postgres-checkout:5432/checkout?sslmode=disable # должно быть в секретах/конфиге. Учебный пример
    ports:
      - "6060:6060"
      - "8080:8080"
      - "50051:50051"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://checkout:8080"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped
    depends_on:
      - postgres-checkout
    networks:
      - net    
  # loms's database
  postgres-loms:
    image: postgres:15.1
    environment:
      POSTGRES_DB: loms
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      PGDATA: "/var/lib/postgresql/data/.pgdata"
    volumes:
      - ./loms:/var/lib/postgresql/data
    ports:
      - 5434:5432
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d loms"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 4G
    networks:
      - net  
  # loms service
  loms:
    image: loms
    build: ./loms/
    environment:
      LOMS_DATABASE_URL: postgres://user:password@postgres-loms:5432/loms?sslmode=disable # должно быть в секретах/конфиге. Учебный пример
    ports:
      - "8081:8081"
      - "50052:50052"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://loms:8081"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped
    depends_on:
      - postgres-loms
      - kafka1
      - kafka2
      - kafka3
    networks:
      - net
  # notifications service
  notifications:
    image: notifications
    build: ./notifications
    environment:
      NOTIFICATIONS_DATABASE_URL: postgres://user:password@postgres-notifications:5432/notifications?sslmode=disable # должно быть в секретах/конфиге. Учебный пример
    ports:
      - "8082:8082"
      - "50053:50053"
    depends_on:
      - kafka1
      - kafka2
      - kafka3
    healthcheck:
      test: ["CMD", "curl", "-f", "http://notifications:8082"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped
    networks:
      - net
  # notifications's database
  postgres-notifications:
    image: postgres:15.1
    environment:
      POSTGRES_DB: notifications
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      PGDATA: "/var/lib/postgresql/data/.pgdata"
    volumes:
      - ./notifications:/var/lib/postgresql/data
    ports:
      - 5435:5432
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d notifications"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 4G
    networks:
      - net  
  # kafka and tool for kafka:
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_INIT_LIMIT: 5
      ZOOKEEPER_SYNC_LIMIT: 2
      ZOOKEEPER_SERVERS: zookeeper:2888:3888
    healthcheck:
      test: echo stat | nc localhost 2181
      interval: 10s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    ports:
      - "2181:2181"
      - "2888:2888"
      - "3888:3888"
    networks:
      - net
  kafka1:
    image: confluentinc/cp-kafka:latest
    healthcheck:
      test: ps augwwx | egrep [S]upportedKafka
      interval: 10s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    depends_on:
      - zookeeper
    ports:
      - "9091:9091"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_LISTNERS: LISTNER_INT://kafka1:29091,LISTENER_EXT://0.0.0.0:9091
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: LISTNER_INT://kafka1:29091,LISTENER_EXT://localhost:9091
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTNER_INT:PLAINTEXT,LISTENER_EXT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: LISTNER_INT
      ZOOKEEPER: zookeeper:2181
    networks:
      - net
  kafka2:
    image: confluentinc/cp-kafka:latest
    healthcheck:
      test: ps augwwx | egrep [S]upportedKafka
      interval: 10s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_LISTNERS: LISTNER_INT://kafka2:29092,LISTENER_EXT://0.0.0.0:9092
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: LISTNER_INT://kafka2:29091,LISTENER_EXT://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTNER_INT:PLAINTEXT,LISTENER_EXT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: LISTNER_INT
      ZOOKEEPER: zookeeper:2181
    networks:
      - net
  kafka3:
    image: confluentinc/cp-kafka:latest
    healthcheck:
      test: ps augwwx | egrep [S]upportedKafka
      interval: 10s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    depends_on:
      - zookeeper
    ports:
      - "9093:9093"
    environment:
      KAFKA_BROKER_ID: 3
      KAFKA_LISTNERS: LISTNER_INT://kafka3:29093,LISTENER_EXT://0.0.0.0:9093
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: LISTNER_INT://kafka3:29093,LISTENER_EXT://localhost:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTNER_INT:PLAINTEXT,LISTENER_EXT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: LISTNER_INT
      ZOOKEEPER: zookeeper:2181
    networks:
      - net
  # metrics
  prometheus:
    image: prom/prometheus
    ports:
      - 9090:9090
    volumes:
      - ./infrastructure/metrics/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./infrastructure/metrics/alerts.yml:/etc/prometheus/alerts.yml
    extra_hosts:
      - host.docker.internal:host-gateway
  grafana: # для сбора метрик в ui http://host.docker.internal:9090
    image: grafana/grafana-oss
    ports:
      - 3000:3000
    volumes:
      - ./infrastructure/metrics/data:/var/lib/grafana
    links:
      - prometheus
    networks:
      - net
  # tracing
  jaeger:
    image: jaegertracing/all-in-one
    ports:
      - 5775:5775/udp
      - 6831:6831/udp
      - 6832:6832/udp
      - 5778:5778
      - 16686:16686 # web
      - 14268:14268
      - 9411:9411
    networks:
      - net